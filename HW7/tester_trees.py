from LinkedBinaryTree import LinkedBinaryTree
leaf1 =LinkedBinaryTree.Node(9)
leaf2 = LinkedBinaryTree.Node(5)
leaf3 = LinkedBinaryTree.Node(1)
leaf4 = LinkedBinaryTree.Node(4)
h11 = LinkedBinaryTree.Node(2, leaf1)
h12 = LinkedBinaryTree.Node(8, leaf2, leaf3)
h22 = LinkedBinaryTree.Node(7, h12, leaf4)
mroot = LinkedBinaryTree.Node(3, h11, h22)

tree = LinkedBinaryTree(mroot)

print(is_height_balanced(tree))

leaf1 = LinkedBinaryTree.Node(5)
leaf2 = LinkedBinaryTree.Node(1)
leaf3 = LinkedBinaryTree.Node(8)
leaf4 = LinkedBinaryTree.Node(4)
a = LinkedBinaryTree.Node(9, leaf1, leaf2)
b = LinkedBinaryTree.Node(2, a)
c = LinkedBinaryTree.Node(7, leaf3, leaf4)
nroot = LinkedBinaryTree.Node(3, b,c)
tree2 = LinkedBinaryTree(nroot)
print(is_height_balanced(tree2))

a = LinkedBinaryTree.Node(-1)
b = LinkedBinaryTree.Node(1)
c = LinkedBinaryTree.Node(-2, a, b)
d = LinkedBinaryTree.Node(2)
e = LinkedBinaryTree.Node(20)
f = LinkedBinaryTree.Node(1, d, e)
g = LinkedBinaryTree.Node(100, c, f)
tree = LinkedBinaryTree(g)
print(min_and_max(tree))